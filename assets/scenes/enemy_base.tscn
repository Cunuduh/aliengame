[gd_scene load_steps=25 format=3 uid="uid://cyqi64cjtpnjp"]

[ext_resource type="Shader" path="res://assets/shaders/dissolve.gdshader" id="3_gwhrs"]
[ext_resource type="Script" path="res://assets/scripts/enemy/enemy_base.gd" id="3_paca2"]
[ext_resource type="Script" path="res://assets/scripts/characters/character_stats.gd" id="4_6035u"]
[ext_resource type="Script" path="res://addons/godot_state_charts/parallel_state.gd" id="5_abcde"]
[ext_resource type="Script" path="res://addons/godot_state_charts/compound_state.gd" id="6_fghij"]
[ext_resource type="Texture2D" uid="uid://bwp1o4byq7vvq" path="res://assets/sprites/npcs/crewmate.png" id="6_j06p2"]
[ext_resource type="Script" path="res://addons/godot_state_charts/atomic_state.gd" id="7_klmno"]
[ext_resource type="Texture2D" uid="uid://bv3d852edjjva" path="res://assets/sprites/effects/dissolve_particle.png" id="7_ordh8"]
[ext_resource type="Script" path="res://addons/godot_state_charts/transition.gd" id="8_iinhv"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_jdn5g"]
size = Vector2(20, 42)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_snygp"]
noise_type = 3
domain_warp_enabled = true
domain_warp_type = 1

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_4fcm6"]
width = 384
height = 300
generate_mipmaps = false
normalize = false
noise = SubResource("FastNoiseLite_snygp")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_aslhk"]
resource_local_to_scene = true
shader = ExtResource("3_gwhrs")
shader_parameter/noise_tiling = 1.0
shader_parameter/progress = 0.0
shader_parameter/edge_thickness = 0.025
shader_parameter/edge_colour = Color(1, 1, 1, 1)
shader_parameter/texture_size = Vector2(52, 37)
shader_parameter/noise_texture = SubResource("NoiseTexture2D_4fcm6")

[sub_resource type="Animation" id="Animation_rmlry"]
length = 0.001

[sub_resource type="Animation" id="Animation_xdjb2"]
length = 0.4
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = false
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 1,
"values": [6, 7, 8, 9]
}

[sub_resource type="Animation" id="Animation_abfkd"]
length = 0.4
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = false
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 1,
"values": [3, 4, 5, 4]
}

[sub_resource type="Animation" id="Animation_k6i2p"]
resource_name = "damaged"
length = 0.3
step = 0.05
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.05, 0.15, 0.25),
"transitions": PackedFloat32Array(0.277393, 1, 2.73208, 1),
"update": 0,
"values": [Vector2(0, 0), Vector2(7, 0), Vector2(-5, 0), Vector2(0, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = false
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = false
tracks/2/path = NodePath("Sprite:frame")
tracks/2/interp = 1
tracks/2/loop_wrap = false
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [1]
}

[sub_resource type="Animation" id="Animation_xfn25"]
length = 0.1
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = false
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [0]
}

[sub_resource type="Animation" id="Animation_p2cjj"]
length = 0.4
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = false
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 1]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_ogkg5"]
_data = {
"RESET": SubResource("Animation_rmlry"),
"attack": SubResource("Animation_xdjb2"),
"attack_wait": SubResource("Animation_abfkd"),
"damaged": SubResource("Animation_k6i2p"),
"default": SubResource("Animation_xfn25"),
"idle": SubResource("Animation_p2cjj")
}

[sub_resource type="Gradient" id="Gradient_ife2x"]
offsets = PackedFloat32Array(0.565574, 1)
colors = PackedColorArray(1, 1, 1, 1, 0, 0, 0, 0)
metadata/_snap_count = 4

[sub_resource type="GradientTexture1D" id="GradientTexture1D_wj7tl"]
gradient = SubResource("Gradient_ife2x")
width = 3

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_hhtr1"]
particle_flag_disable_z = true
emission_shape = 3
emission_box_extents = Vector3(12, 16, 1)
gravity = Vector3(0, 98, 0)
color_ramp = SubResource("GradientTexture1D_wj7tl")
turbulence_noise_strength = 6.0
turbulence_noise_speed_random = 1.0

[sub_resource type="GDScript" id="GDScript_yt6fa"]
script/source = "@icon(\"state_chart.svg\")
@tool
## This is statechart. It contains a root state (commonly a compound or parallel state) and is the entry point for 
## the state machine.
class_name StateChart 
extends Node

## The the remote debugger
const DebuggerRemote = preload(\"utilities/editor_debugger/editor_debugger_remote.gd\")

## Emitted when the state chart receives an event. This will be 
## emitted no matter which state is currently active and can be 
## useful to trigger additional logic elsewhere in the game 
## without having to create a custom event bus. It is also used
## by the state chart debugger. Note that this will emit the 
## events in the order in which they are processed, which may 
## be different from the order in which they were received. This is
## because the state chart will always finish processing one event
## fully before processing the next. If an event is received
## while another is still processing, it will be enqueued.
signal event_received(event:StringName)

## Flag indicating if this state chart should be tracked by the 
## state chart debugger in the editor.
@export var track_in_editor:bool = false

## The root state of the state chart.
var _state:StateChartState = null

## This dictonary contains known properties used in expression guards. Use the 
## [method set_expression_property] to add properties to this dictionary.
var _expression_properties:Dictionary = {
}

## A list of pending events 
var _queued_events:Array[StringName] = []

## Whether or not a property change is pending.
var _property_change_pending:bool = false

## Flag indicating if the state chart is currently processing. 
## Until a change is fully processed, no further changes can
## be introduced from the outside.
var _locked_down:bool = false

var _queued_transitions:Array[Dictionary] = []
var _transitions_processing_active:bool = false

var _debugger_remote:DebuggerRemote = null


func _ready() -> void:
	if Engine.is_editor_hint():
		return 

	# check if we have exactly one child that is a state
	if get_child_count() != 1:
		push_error(\"StateChart must have exactly one child\")
		return

	# check if the child is a state
	var child:Node = get_child(0)
	if not child is StateChartState:
		push_error(\"StateMachine's child must be a State\")
		return

	# initialize the state machine
	_state = child as StateChartState
	_state._state_init()

	# enter the state
	_state._state_enter.call_deferred()

	# if we are in an editor build and this chart should be tracked 
	# by the debugger, create a debugger remote
	if track_in_editor and OS.has_feature(\"editor\"):
		_debugger_remote = DebuggerRemote.new(self)


## Sends an event to this state chart. The event will be passed to the innermost active state first and
## is then moving up in the tree until it is consumed. Events will trigger transitions and actions via emitted
## signals. There is no guarantee when the event will be processed. The state chart
## will process the event as soon as possible but there is no guarantee that the 
## event will be fully processed when this method returns.
func send_event(event:StringName) -> void:
	if not is_node_ready():
		push_error(\"State chart is not yet ready. If you call `send_event` in _ready, please call it deferred, e.g. `state_chart.send_event.call_deferred(\\\"my_event\\\").\")
		return
		
	if not is_instance_valid(_state):
		push_error(\"State chart has no root state. Ignoring call to `send_event`.\")
		return
	
	_queued_events.append(event)
	_run_changes()
		
		
## Sets a property that can be used in expression guards. The property will be available as a global variable
## with the same name. E.g. if you set the property \"foo\" to 42, you can use the expression \"foo == 42\" in
## an expression guard.
func set_expression_property(name:StringName, value) -> void:
	if not is_node_ready():
		push_error(\"State chart is not yet ready. If you call `set_expression_property` in `_ready`, please call it deferred, e.g. `state_chart.set_expression_property.call_deferred(\\\"my_property\\\", 5).\")
		return
		
	if not is_instance_valid(_state):
		push_error(\"State chart has no root state. Ignoring call to `set_expression_property`.\")
		return
	
	_expression_properties[name] = value
	_property_change_pending = true
	_run_changes()
		
		
func _run_changes() -> void:
	if _locked_down:
		return
		
	# enable the reentrance lock
	_locked_down = true
	
	while (not _queued_events.is_empty()) or _property_change_pending:
		# first run any pending property changes, so that we keep the order
		# in which stuff is processed
		if _property_change_pending:
			_property_change_pending = false
			_state._process_transitions(&\"\", true)
	
		if not _queued_events.is_empty():
			# process the next event	
			var next_event = _queued_events.pop_front()
			event_received.emit(next_event)
			_state._process_transitions(next_event, false)
	
	_locked_down = false


## Allows states to queue a transition for running. This will eventually run the transition
## once all currently running transitions have finished. States should call this method
## when they want to transition away from themselves. 
func _run_transition(transition:Transition, source:StateChartState) -> void:
	# if we are currently inside of a transition, queue it up. This can happen
	# if a state has an automatic transition on enter, in which case we want to
	# finish the current transition before starting a new one.
	if _transitions_processing_active:
		_queued_transitions.append({transition : source})
		return
		
	_transitions_processing_active = true

	# we can only transition away from a currently active state
	# if for some reason the state no longer is active, ignore the transition	
	_do_run_transition(transition, source)
	
	# if we still have transitions
	while _queued_transitions.size() > 0:
		var next_transition_entry = _queued_transitions.pop_front()
		var next_transition = next_transition_entry.keys()[0]
		var next_transition_source = next_transition_entry[next_transition]
		_do_run_transition(next_transition, next_transition_source)

	_transitions_processing_active = false

## Runs the transition. Used internally by the state chart, do not call this directly.	
func _do_run_transition(transition:Transition, source:StateChartState):
	if source.active:
		# Notify interested parties that the transition is about to be taken
		transition.taken.emit()
		source._handle_transition(transition, source)
	else:
		_warn_not_active(transition, source)	


func _warn_not_active(transition:Transition, source:StateChartState):
	push_warning(\"Ignoring request for transitioning from \", source.name, \" to \", transition.to, \" as the source state is no longer active. Check whether your trigger multiple state changes within a single frame.\")



## Calls the `step` function in all active states. Used for situations where `state_processing` and 
## `state_physics_processing` don't make sense (e.g. turn-based games, or games with a fixed timestep).
func step() -> void:
	if not is_node_ready():
		push_error(\"State chart is not yet ready. If you call `step` in `_ready`, please call it deferred, e.g. `state_chart.step.call_deferred()`.\")
		return
		
	if not is_instance_valid(_state):
		push_error(\"State chart has no root state. Ignoring call to `step`.\")
		return
	_state._state_step()

func _get_configuration_warnings() -> PackedStringArray:
	var warnings:PackedStringArray = []
	if get_child_count() != 1:
		warnings.append(\"StateChart must have exactly one child\")
	else:
		var child:Node = get_child(0)
		if not child is StateChartState:
			warnings.append(\"StateChart's child must be a State\")
	return warnings


"

[node name="EnemyBase" type="CharacterBody2D" node_paths=PackedStringArray("dissolve_particles") groups=["enemy"]]
z_index = 69
y_sort_enabled = true
collision_layer = 4
collision_mask = 2
motion_mode = 1
script = ExtResource("3_paca2")
dissolve_particles = NodePath("DissolveParticles")

[node name="CharacterStats" type="Node" parent="."]
script = ExtResource("4_6035u")
max_health = 100
max_attack = 1
max_defense = 1
health = 100
attack = 1
defense = 1

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, 0.5)
shape = SubResource("RectangleShape2D_jdn5g")

[node name="Sprite" type="Sprite2D" parent="."]
texture_filter = 1
material = SubResource("ShaderMaterial_aslhk")
texture = ExtResource("6_j06p2")
hframes = 2
frame = 1
metadata/_aseprite_wizard_config_ = {
"i_mode": -1,
"keep_anim_length": false,
"layer": "",
"o_ex_p": "",
"o_folder": "res://assets/sprites/npcs",
"o_name": "",
"only_visible": false,
"player": "AnimationPlayer",
"slice": "",
"source": "res://assets/sprites/npcs/crewmate.aseprite"
}
metadata/_aseprite_wizard_source_file_hash_ = "f3f94c579e44a7ddc1c711f9ba07911a"
metadata/_aseprite_wizard_interface_config_ = {
"output_section": true
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_ogkg5")
}

[node name="DissolveParticles" type="GPUParticles2D" parent="."]
emitting = false
amount = 128
process_material = SubResource("ParticleProcessMaterial_hhtr1")
texture = ExtResource("7_ordh8")
one_shot = true
explosiveness = 0.5
randomness = 1.0
fixed_fps = 60

[node name="StateChart" type="Node" parent="."]
script = SubResource("GDScript_yt6fa")

[node name="Root" type="Node" parent="StateChart"]
script = ExtResource("5_abcde")

[node name="Movement" type="Node" parent="StateChart/Root"]
script = ExtResource("6_fghij")
initial_state = NodePath("Waiting")

[node name="Orbiting" type="Node" parent="StateChart/Root/Movement"]
script = ExtResource("7_klmno")

[node name="ToWaiting" type="Node" parent="StateChart/Root/Movement/Orbiting"]
script = ExtResource("8_iinhv")
to = NodePath("../../Waiting")
event = &"stop_movement"
delay_in_seconds = "0.0"

[node name="ToBlocking" type="Node" parent="StateChart/Root/Movement/Orbiting"]
script = ExtResource("8_iinhv")
to = NodePath("../../Blocking")
event = &"to_blocking"
delay_in_seconds = "0.0"

[node name="Blocking" type="Node" parent="StateChart/Root/Movement"]
script = ExtResource("7_klmno")

[node name="ToWaiting" type="Node" parent="StateChart/Root/Movement/Blocking"]
script = ExtResource("8_iinhv")
to = NodePath("../../Waiting")
event = &"stop_movement"
delay_in_seconds = "0.0"

[node name="ToOrbiting" type="Node" parent="StateChart/Root/Movement/Blocking"]
script = ExtResource("8_iinhv")
to = NodePath("../../Orbiting")
event = &"to_orbiting"
delay_in_seconds = "0.0"

[node name="Waiting" type="Node" parent="StateChart/Root/Movement"]
script = ExtResource("7_klmno")

[node name="ToBlocking" type="Node" parent="StateChart/Root/Movement/Waiting"]
script = ExtResource("8_iinhv")
to = NodePath("../../Blocking")
event = &"to_blocking"
delay_in_seconds = "0.0"

[node name="ToOrbiting" type="Node" parent="StateChart/Root/Movement/Waiting"]
script = ExtResource("8_iinhv")
to = NodePath("../../Orbiting")
event = &"to_orbiting"
delay_in_seconds = "0.0"

[node name="Attack" type="Node" parent="StateChart/Root"]
script = ExtResource("6_fghij")
initial_state = NodePath("Waiting")

[node name="Waiting" type="Node" parent="StateChart/Root/Attack"]
script = ExtResource("7_klmno")

[node name="ToAttacking" type="Node" parent="StateChart/Root/Attack/Waiting"]
script = ExtResource("8_iinhv")
to = NodePath("../../Attacking")
event = &"attack_interval"
delay_in_seconds = "0.0"

[node name="Attacking" type="Node" parent="StateChart/Root/Attack"]
script = ExtResource("7_klmno")

[node name="Waiting" type="Node" parent="StateChart/Root/Attack/Attacking"]
script = ExtResource("8_iinhv")
to = NodePath("../../Waiting")
event = &"attack_complete"
delay_in_seconds = "0.0"

[connection signal="state_processing" from="StateChart/Root/Movement/Orbiting" to="." method="_on_orbiting_state_processing"]
[connection signal="state_processing" from="StateChart/Root/Movement/Blocking" to="." method="_on_blocking_state_processing"]
[connection signal="state_entered" from="StateChart/Root/Attack/Attacking" to="." method="_on_attacking_state_entered"]
